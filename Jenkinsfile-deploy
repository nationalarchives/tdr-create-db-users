library("tdr-jenkinslib")
pipeline {
  agent {
    label "master"
  }
  parameters {
    choice(name: "STAGE", choices: ["intg", "staging", "prod"], description: "The stage you are deploying the lambda for")
    string(name: "TO_DEPLOY", description: "The git tag, branch or commit reference to deploy, e.g. '1'")
  }
  stages {
    stage("Deploy lambda") {
      agent {
        ecs {
          inheritFrom "aws"
          taskrole "arn:aws:iam::${env.MANAGEMENT_ACCOUNT}:role/TDRJenkinsNodeLambdaRole${params.STAGE.capitalize()}"
        }
      }
      steps {
        script {
          def accountNumber = tdr.getAccountNumberFromStage(params.STAGE)
          sh "python3 /deploy_lambda_from_s3.py ${accountNumber} ${params.STAGE} tdr-create-keycloak-db-user-${params.STAGE} tdr-backend-code-mgmt ${params.TO_DEPLOY}/create-db-users.jar"
          sh "python3 /deploy_lambda_from_s3.py ${accountNumber} ${params.STAGE} tdr-create-db-users-${params.STAGE} tdr-backend-code-mgmt ${params.TO_DEPLOY}/create-db-users.jar"
        }
      }
    }
    stage("Update release branch") {
      steps {
        script {
          def releaseBranch = "release-${params.STAGE}"

          sh "git branch -f ${releaseBranch} HEAD"
          sshagent(['github-jenkins']) {
            sh("git push -f origin ${releaseBranch}")
          }
        }
      }
    }
  }
  post {
    success {
      script {
        tdr.postToDaTdrSlackChannel(colour: "danger", message: "*Create DB users* :warning: Deployment of the create database users lambdas has failed.")
      }
    }
    failure {
      script {
        tdr.postToDaTdrSlackChannel(colour: "good", message: "*Create DB users* :arrow_up: The create database users lambdas have been deployed")
      }
    }
  }
}
